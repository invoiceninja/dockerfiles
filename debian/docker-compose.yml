x-logging: &default-logging
  options:
    max-size: "10m"
    max-file: "3"
  driver: json-file

services:
  app:
    build:
      context: .
    image: invoiceninja/invoiceninja-debian:${TAG:-latest}
    # Name container to avoid breaking changes in the future
    container_name: debian_app_1
    restart: unless-stopped
    env_file:
      - ./.env
    volumes:
      - ./.env:/var/www/html/.env
      # - ./php/php.ini:/usr/local/etc/php/conf.d/invoiceninja.ini:ro
      # - ./php/php-fpm.conf:/usr/local/etc/php-fpm.d/invoiceninja.conf:ro
      # - ./supervisor/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf:ro
      - app_public:/var/www/html/public
      - app_storage:/var/www/html/storage
    networks:
      - app-network
    depends_on:
      # If you choose to use maridb instead of mysql juste comment "mysql:" and uncomment "mariadb:"
      mysql:
      # mariadb:
        condition: service_healthy
      valkey:
        condition: service_healthy
    logging: *default-logging

  nginx:
    image: nginx:stable-alpine
    # Name container to avoid breaking changes in the future
    container_name: debian_nginx_1
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d:ro
      - app_public:/var/www/html/public:ro
      - app_storage:/var/www/html/storage:ro
    networks:
      - app-network
    depends_on:
      - app
    logging: *default-logging

  mysql:
    image: mysql:8
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging


# Comment section mysql and uncomment mariadb section to switch

#  # Replace MySQL with MariaDB for fully open source
#  mariadb:
#    # LTS Image for stability
#    image: mariadb:lts
#    # Name container to avoid breaking changes in the future
#    container_name: debian_mysql_1
#    restart: unless-stopped
#    env_file:
#      - ./.env
#    environment:
#      MYSQL_DATABASE: ${DB_DATABASE}
#      MYSQL_USER: ${DB_USERNAME}
#      MYSQL_PASSWORD: ${DB_PASSWORD}
#      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
#    # Keep the same volume name as mysql previously to avoid breaking changes
#    volumes:
#      - mysql_data:/var/lib/mysql
#    networks:
#      - app-network
#    healthcheck:
#      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    logging: *default-logging

  # Replace Redis with Valkey for fully open source and higher performances
  valkey:
    # Latest Image for the last Debian Bookworm Slim Image 
    image: valkey/valkey:latest
    # Name container to avoid breaking changes in the future
    container_name: debian_valkey_1
    restart: unless-stopped
    volumes:
      - valkey_data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging

networks:
  app-network:
    driver: bridge

volumes:
  app_public:
    driver: local
    # Name volume to avoid breaking changes
    name: "debian_app_public"
  app_storage:
    driver: local
    # Name volume to avoid breaking changes
    name: "debian_app_storage"
  mysql_data:
    driver: local
    # Name volume to avoid breaking changes
    name: "debian_mysql_data"
  valkey_data:
    driver: local
    # Name volume to avoid breaking changes
    name: "debian_valkey_data"
